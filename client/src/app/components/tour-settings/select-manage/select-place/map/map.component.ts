import {
  Component,
  OnInit,
  ViewChild,
  ElementRef,
  Input,
  AfterViewInit,
  OnChanges,
  Output,
  EventEmitter
} from '@angular/core';
import { TourService } from '../../../../../services/tour.service';
import { NgxSpinnerService } from 'ngx-spinner';
declare var H: any;

@Component({
  selector: 'app-map',
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.scss']
})
export class MapComponent implements OnInit, AfterViewInit, OnChanges {

  @ViewChild("map")
  public mapElement: ElementRef;

  @Input() selectedPlace;

  @Input()
  public appId: any;

  @Input()
  public appCode: any;

  @Input()
  public lat: any;

  @Input()
  public lng: any;

  @Input()
  public width: any;

  @Input()
  public height: any;

  @Output() selectOnMap = new EventEmitter();

  private platform: any;
  private map: any;

  private ui: any;
  private search: any;

  public constructor( private tour: TourService,
                      private spinner: NgxSpinnerService) {
    this.width = '529px';
    this.height = '392px';
    this.lat = '51.5085300';
    this.lng = '-0.1257400'
  }

  public ngOnChanges(changes): void {
    if(changes.selectedPlace.currentValue){
      if(changes.selectedPlace.currentValue.palce) {
        this.places(changes.selectedPlace.currentValue.palce)
      }
    }
  }

  public ngOnInit() {

    this.platform = new H.service.Platform({
      "app_id": this.appId || 'kG4I8fUQHhzkmmyVJ40I',
      "app_code": this.appCode || 'iWud5K5czcn5ybaxjczNBQ'
    });

    this.search = new H.places.Search(this.platform.getPlacesService());

    this.tour.selectedPlaces.forEach((item) => {
      this.search.request({ "q": item.city, "at": this.lat + "," + this.lng }, {}, data => {
        for(let i = 0; i < data.results.items.length; i++) {
          let marker = new H.map.Marker({ "lat": data.results.items[i].position[0], "lng": data.results.items[i].position[1] });
          marker.setData("<p>" + data.results.items[i].title + "<br>" + data.results.items[i].vicinity + "</p>");
          marker.addEventListener('tap', event => {
            let bubble =  new H.ui.InfoBubble(event.target.getPosition(), {
              content: event.target.getData()
            });
            this.ui.addBubble(bubble);

          }, false);
          this.map.addObject(marker)
        }
      }, error => {
        console.error(error);
      });
    })
  }

  public ngAfterViewInit() {
    let defaultLayers = this.platform.createDefaultLayers({ pois: true });

    this.map = new H.Map(
      this.mapElement.nativeElement,
      defaultLayers.normal.mapnight,
      {
        zoom: 2,
        center: { lat: this.lat, lng: this.lng }
      }
    );

    let behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(this.map));

    this.ui = H.ui.UI.createDefault(this.map, defaultLayers);

  }

  public places(query) {
    this.selectOnMap.emit(this.tour.selectedPlaces);
    this.search.request({ "q": query.city, "at": this.lat + "," + this.lng }, {}, data => {
      for(let i = 0; i < data.results.items.length; i++) {
        this.dropMarker({ "lat": data.results.items[i].position[0], "lng": data.results.items[i].position[1] }, data.results.items[i]);
      }
    }, error => {
      console.error(error);
    });
  }

  stringifyEqual(a, b) {
    return JSON.stringify(a) === JSON.stringify(b)
  }


  private dropMarker(coordinates: any, data: any) {

    let svgMarkup = '<svg xmlns="http://www.w3.org/2000/svg" height="25pt" viewBox="-59 0 512 512.00022" width="25pt"><path d="m385.519531 197.5625c0 66.496094-34.359375 124.964844-86.285156 158.628906-7.820313 5.078125-14.351563 11.894532-18.949219 20.003906l-67.847656 119.855469c-.152344.265625-.308594.523438-.480469.777344-7.25 11.527344-24.378906 11.273437-31.195312-.777344l-67.847657-119.855469c-4.585937-8.097656-11.109374-14.917968-18.917968-19.972656-52.675782-34.136718-87.28125-93.78125-86.296875-161.445312 1.464843-101.710938 84.492187-184.703125 186.207031-186.113282 6.09375-.082031 12.121094.121094 18.070312.601563 97.148438 7.8125 173.542969 89.132813 173.542969 188.296875zm0 0" fill="#5ca33b"/><path d="m385.519531 197.5625c0 66.496094-34.359375 124.964844-86.285156 158.628906-7.820313 5.078125-14.351563 11.894532-18.949219 20.003906l-67.847656 119.855469c-.152344.265625-.308594.523438-.480469.777344-.175781-.253906-.328125-.511719-.480469-.777344l-67.847656-119.855469c-4.585937-8.097656-11.109375-14.917968-18.921875-19.972656-52.671875-34.136718-87.277343-93.78125-86.292969-161.445312 1.402344-97.464844 77.695313-177.730469 173.5625-185.511719 97.148438 7.8125 173.542969 89.132813 173.542969 188.296875zm0 0" fill="#6dc54a"/><path d="m336.089844 197.339844c0 77.054687-62.476563 139.492187-139.492188 139.492187-77.039062 0-139.492187-62.453125-139.492187-139.492187 0-82.808594 71.882812-147.75 154.851562-138.644532 69.8125 7.648438 124.132813 66.804688 124.132813 138.644532zm0 0" fill="#c2eaf2"/><path d="m336.089844 197.339844c0 71.847656-54.320313 131.003906-124.132813 138.652344-69.8125-7.648438-124.136719-66.804688-124.136719-138.652344 0-71.839844 54.324219-130.996094 124.136719-138.644532 69.8125 7.648438 124.132813 66.804688 124.132813 138.644532zm0 0" fill="#def4f8"/><path d="m307.679688 173.0625v108.648438c-25.480469 33.496093-65.765626 55.121093-111.082032 55.121093-45.332031 0-85.609375-21.625-111.078125-55.113281v-108.65625c0-17.238281 13.984375-31.222656 31.222657-31.222656h159.714843c17.238281 0 31.222657 13.984375 31.222657 31.222656zm0 0" fill="#ffd993"/><path d="m276.457031 141.839844h-159.714843c-7.847657 0-15.019532 2.90625-20.507813 7.691406 0 0 .003906-.003906.003906-.003906-2.421875 2.109375-4.554687 4.625-6.253906 7.445312-5.777344 9.601563-4.464844 14.78125-4.464844 50.65625v74.089844c25.46875 33.488281 65.746094 55.113281 111.078125 55.113281 5.191406 0 10.3125-.289062 15.347656-.839843-62.96875-6.910157-113.328124-55.703126-122.59375-117.929688-.382812-2.582031 2.652344-4.25 4.613282-2.535156 3.582031 3.128906 8.8125 7.691406 16.503906 14.417968 5.609375 4.914063 12.808594 7.617188 20.261719 7.617188h131.730469c7.453124 0 14.660156-2.703125 20.273437-7.617188 26.734375-23.390624 23.679687-20.664062 24.949219-21.949218v-34.933594c-.003906-17.242188-13.980469-31.222656-31.226563-31.222656zm0 0" fill="#ffcd71"/><path d="m307.679688 173.0625v18.554688c-1.269532 1.28125 1.785156-1.441407-24.949219 21.949218-5.609375 4.914063-12.816407 7.617188-20.269531 7.617188-3.601563 0-133.648438 0-131.730469 0-7.457031 0-14.652344-2.703125-20.261719-7.617188-26.972656-23.597656-23.722656-20.570312-24.949219-22.320312v-18.183594c0-17.238281 13.984375-31.222656 31.222657-31.222656h159.714843c17.238281 0 31.222657 13.984375 31.222657 31.222656zm0 0" fill="#ffb52d"/><path d="m142.082031 250.871094c-5.796875 0-10.492187-4.695313-10.492187-10.492188v-37.367187c0-5.796875 4.695312-10.496094 10.492187-10.496094s10.496094 4.699219 10.496094 10.496094v37.367187c0 5.796875-4.699219 10.492188-10.496094 10.492188zm0 0" fill="#f29500"/><path d="m251.117188 250.871094c-5.796876 0-10.496094-4.695313-10.496094-10.492188v-37.367187c0-5.796875 4.699218-10.496094 10.496094-10.496094 5.796874 0 10.492187 4.699219 10.492187 10.496094v37.367187c0 5.796875-4.695313 10.492188-10.492187 10.492188zm0 0" fill="#f29500"/><path d="m193.792969.0117188c-106.796875 1.4960932-193.792969 89.1796872-193.792969 196.5781252 0 66.9375 33.582031 128.652344 89.816406 165.097656 6.828125 4.421875 12.5 10.414062 16.414063 17.3125l29.820312 52.683594c2.089844 3.699218 6.777344 4.996094 10.464844 2.898437 3.695313-2.089843 4.996094-6.765625 2.898437-10.460937l-29.8125-52.6875c-10.550781-18.574219-22.058593-21.460938-39.027343-35.585938-41.1875-34.257812-65.21875-84.894531-65.21875-139.257812 0-99.261719 82.082031-181.242188 181.242187-181.242188 99.945313 0 181.246094 81.3125 181.246094 181.242188 0 54.363281-24.03125 105-65.21875 139.257812-42.828125 35.636719-12.078125-12.011718-106.871094 155.453125-4.039062 7.117188-14.269531 7.113281-18.308594 0l-22.902343-40.449219c-2.085938-3.6875-6.777344-4.988281-10.460938-2.898437-3.6875 2.089844-4.988281 6.777344-2.898437 10.464844l22.890625 40.449219c9.917969 17.5 35.121093 17.523437 45.046875 0l67.847656-119.855469c3.902344-6.910157 9.59375-12.910157 16.441406-17.355469 56.230469-36.445312 89.789063-98.148438 89.789063-165.066406 0-108.089844-88.085938-197.789063-199.40625-196.5781252zm0 0"/><path d="m58.324219 176.15625c-4.492188-.390625-8.476563 2.949219-8.863281 7.464844-3.101563 36.507812 7.199218 71.835937 28.378906 100.421875 53.199218 72.066406 157.902344 80.761719 222.164062 17.660156 58.785156-57.707031 58.957032-151.71875.972656-209.703125-79.054687-79.054688-212.199218-44.53125-245.210937 59.789062-1.359375 4.3125 1.035156 8.90625 5.34375 10.28125 4.3125 1.359376 8.917969-1.035156 10.28125-5.347656 17.34375-54.824218 67.660156-91.648437 125.207031-91.648437 96.042969 0 159.875 100.488281 118.761719 187.261719v-79.273438c0-13.585938-6.910156-25.960938-18.480469-33.117188-3.601562-2.222656-8.332031-1.105468-10.5625 2.496094-2.234375 3.613282-1.117187 8.34375 2.496094 10.566406 7.003906 4.332032 11.191406 11.835938 11.191406 20.054688v15.195312l-22.328125 19.535157c-2.460937 2.148437-5.324219 3.734375-8.386719 4.675781v-9.457031c0-10.023438-8.148437-18.175781-18.171874-18.175781-10.023438 0-18.171876 8.152343-18.171876 18.175781v10.492187h-72.691406v-10.492187c0-10.023438-8.148437-18.175781-18.171875-18.175781-10.023437 0-18.171875 8.152343-18.171875 18.175781v9.457031c-6.0625-1.863281-6.59375-3.109375-30.714844-24.210938v-15.195312c0-12.980469 10.566407-23.546875 23.546876-23.546875h146.261718c4.238282 0 7.675782-3.4375 7.675782-7.675781 0-4.238282-3.4375-7.679688-7.675782-7.679688h-21.871094v-31.226562h10.496094c4.242188 0 7.679688-3.4375 7.679688-7.679688 0-4.238281-3.4375-7.675781-7.679688-7.675781h-110.058594c-4.242187 0-7.679687 3.4375-7.679687 7.675781 0 4.242188 3.4375 7.679688 7.679687 7.679688h10.492188v31.226562h-35.320312c-21.445313 0-38.902344 17.457032-38.902344 38.902344v79.273438c-10.011719-21.132813-14.050782-44.410157-12.050782-67.324219.378907-4.503907-2.957031-8.476563-7.464843-8.855469zm109.097656-73.222656h58.355469v31.226562h-58.355469zm80.878906 100.078125c0-3.726563 5.632813-3.722657 5.632813 0v37.367187c0 3.726563-5.632813 3.71875-5.632813 0 0-13.796875 0-23.949218 0-37.367187zm-109.035156 0c0-3.726563 5.632813-3.722657 5.632813 0v37.367187c0 3.726563-5.632813 3.71875-5.632813 0 0-13.796875 0-23.949218 0-37.367187zm-46.070313 5.640625c12.363282 10.816406 17.996094 17.300781 30.714844 19.59375v12.132812c0 10.023438 8.148438 18.171875 18.171875 18.171875 10.023438 0 18.171875-8.148437 18.171875-18.171875v-11.519531h72.691406v11.519531c0 10.023438 8.148438 18.171875 18.171876 18.171875 10.023437 0 18.171874-8.148437 18.171874-18.171875v-12.132812c6.820313-1.226563 13.207032-4.277344 18.488282-8.894532l12.226562-10.699218v68.542968c-52.652344 67.242188-154.085937 67.328126-206.808594 0zm0 0"/></svg>';
    let icon = new H.map.Icon(svgMarkup);

    let marker = new H.map.Marker(coordinates, {icon: icon});
    let deleted = false;
    marker.setData("<p>" + data.title + "<br>" + data.vicinity + "</p>");
    marker.addEventListener('tap', event => {
      let bubble =  new H.ui.InfoBubble(event.target.getPosition(), {
        content: event.target.getData()
      });
      this.ui.addBubble(bubble);
    }, false);
    if(this.map.getObjects().length === 0) {
      this.map.addObject(marker);
    } else {
      this.map.getObjects().map((item, index) => {
        if(this.stringifyEqual(marker.b, item.b) ){
          this.map.removeObject(item);
          deleted = true;
        } else if(index === this.map.getObjects().length - 1){
          deleted = false;
        }
      });
      if(!deleted){
        this.map.addObject(marker);
      }
    }
  }
}
